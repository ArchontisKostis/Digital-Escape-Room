/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package EscapeRoom.GUI;

import EscapeRoom.Player;
import java.awt.Cursor;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author Archontis
 */
public class MainFrame extends javax.swing.JFrame {
    // Properties Declaration
    private String navigationState = "none";
    private String panelState = "home";
    private Player player;
    
    
    
    public MainFrame() {
        initComponents();
        this.addKeyListener(new myKeyListener());
    }
    
    public void setPanelState(String aStateName){
        this.panelState = aStateName;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        tutorialPanel = new EscapeRoom.GUI.TutorialPanel();
        newPlayerPanel = new EscapeRoom.GUI.newPlayerPanel();
        startGamePanel = new EscapeRoom.GUI.StartGamePanel();
        settingsPanel = new EscapeRoom.GUI.SettingsPanel();
        creditsPanel = new EscapeRoom.GUI.CreditsPanel();
        exitPromptPanel = new EscapeRoom.GUI.ExitPanel();
        loadGamePanel = new EscapeRoom.GUI.loadGamePanel();
        tutorialLabel = new javax.swing.JLabel();
        startLabel = new javax.swing.JLabel();
        settingsLabel = new javax.swing.JLabel();
        creditsLabel = new javax.swing.JLabel();
        exitLabel = new javax.swing.JLabel();
        bgImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(Toolkit.getDefaultToolkit().
            createCustomCursor(
                Toolkit.getDefaultToolkit().getImage(getClass().getResource("/EscapeRoom/guiAssets/cursor.png")),
                new Point(0,0),"custom cursor"
            ));

            mainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

            tutorialPanel.setVisible(false);
            mainPanel.add(tutorialPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

            newPlayerPanel.setVisible(false);
            newPlayerPanel.addListenerToButton(new ButtonListener());
            mainPanel.add(newPlayerPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

            startGamePanel.setVisible(false);
            startGamePanel.addListenerToButtons(new ButtonListener());
            mainPanel.add(startGamePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, 743, 395));

            settingsPanel.setVisible(false);
            settingsPanel.setMainFrame(this);
            mainPanel.add(settingsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

            creditsPanel.setVisible(false);
            mainPanel.add(creditsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 560));

            exitPromptPanel.setVisible(false);
            exitPromptPanel.setMainFrame(this);
            mainPanel.add(exitPromptPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 180, 700, 180));

            loadGamePanel.setVisible(false);
            mainPanel.add(loadGamePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

            tutorialLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/EscapeRoom/guiAssets/tutorialIcon.png"))); // NOI18N
            tutorialLabel.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    tutorialLabelMouseClicked(evt);
                }
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    tutorialLabelMouseEntered(evt);
                }
                public void mouseExited(java.awt.event.MouseEvent evt) {
                    tutorialLabelMouseExited(evt);
                }
            });
            mainPanel.add(tutorialLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 50, 110, 110));

            startLabel.setBackground(new java.awt.Color(255, 255, 255));
            startLabel.setFont(new java.awt.Font("DPComic", 0, 52)); // NOI18N
            startLabel.setForeground(new java.awt.Color(255, 255, 255));
            startLabel.setText("START");
            startLabel.setEnabled(false);
            startLabel.addMouseListener(new myMouseListener());
            mainPanel.add(startLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 200, 140, -1));

            settingsLabel.setBackground(new java.awt.Color(255, 255, 255));
            settingsLabel.setFont(new java.awt.Font("DPComic", 0, 52)); // NOI18N
            settingsLabel.setForeground(new java.awt.Color(255, 255, 255));
            settingsLabel.setText("SETTINGS");
            settingsLabel.setEnabled(false);
            settingsLabel.setFocusable(false);
            settingsLabel.addMouseListener(new myMouseListener());
            mainPanel.add(settingsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 260, 200, 60));

            creditsLabel.setBackground(new java.awt.Color(255, 255, 255));
            creditsLabel.setFont(new java.awt.Font("DPComic", 0, 52)); // NOI18N
            creditsLabel.setForeground(new java.awt.Color(255, 255, 255));
            creditsLabel.setText("CREDITS");
            creditsLabel.setEnabled(false);
            creditsLabel.addMouseListener(new myMouseListener());
            mainPanel.add(creditsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 330, 180, -1));

            exitLabel.setBackground(new java.awt.Color(255, 255, 255));
            exitLabel.setFont(new java.awt.Font("DPComic", 0, 52)); // NOI18N
            exitLabel.setForeground(new java.awt.Color(255, 255, 255));
            exitLabel.setText("EXIT");
            exitLabel.setEnabled(false);
            exitLabel.addMouseListener(new myMouseListener());
            mainPanel.add(exitLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 390, 100, -1));

            bgImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/EscapeRoom/guiAssets/mainMenuBg.png"))); // NOI18N
            mainPanel.add(bgImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, -1));

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            );

            pack();
            setLocationRelativeTo(null);
        }// </editor-fold>//GEN-END:initComponents

    private void tutorialLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tutorialLabelMouseClicked
        this.tutorialPanel.setVisible(true);
        this.panelState = "tutorial";
        this.requestFocus();
    }//GEN-LAST:event_tutorialLabelMouseClicked

    private void tutorialLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tutorialLabelMouseEntered
        this.tutorialLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/EscapeRoom/guiAssets/tutorialIconHover.png")));
    }//GEN-LAST:event_tutorialLabelMouseEntered

    private void tutorialLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tutorialLabelMouseExited
        this.tutorialLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/EscapeRoom/guiAssets/tutorialIcon.png")));
    }//GEN-LAST:event_tutorialLabelMouseExited
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainFrame menuFrame = new MainFrame();
                menuFrame.setVisible(true);
                
            }
        });
    }
    
    private void disableAllLabels() {
       startLabel.setEnabled(false);
       settingsLabel.setEnabled(false);
       creditsLabel.setEnabled(false);
       exitLabel.setEnabled(false);
    }
    
    public void navigateUpKey() {
        // Check the pointer state
        switch (navigationState) {
            case "none":
                // Change the state
                navigationState = "start";
                // Disable Start Label and Enable Exit Label
                startLabel.setEnabled(true);
                break;
                
            case "start":
                // Change the state
                navigationState = "exit";
                // Disable Start Label and Enable Exit Label
                exitLabel.setEnabled(true);
                startLabel.setEnabled(false);
                break;
                
            case "settings":
                // Change the state
                navigationState = "start";
                // Disable Credits Label and Enable Start Label
                startLabel.setEnabled(true);
                settingsLabel.setEnabled(false);
                break;
                
            case "credits":
                // Change the state
                navigationState = "settings";
                // Disable Credits Label and Enable Start Label
                settingsLabel.setEnabled(true);
                creditsLabel.setEnabled(false);
                break;
            case "exit":
                // Change the state
                navigationState = "credits";
                // Disable Credits Label and Enable Start Label
                creditsLabel.setEnabled(true);
                exitLabel.setEnabled(false);
                break;
        }
    }
    
    public void navigateDownKey(){
        switch (navigationState) {
            case "none":
                navigationState="start";
                startLabel.setEnabled(true);
                break;
        
            case "start":
                // Change the state
                navigationState = "settings";
                // Disable Start Label and Enable Credits Label
                settingsLabel.setEnabled(true);
                startLabel.setEnabled(false);
                break;
            
            case "settings":
                // Change the state
                navigationState = "credits";
                // Disable Settings Label and Enable Credits Label
                creditsLabel.setEnabled(true);
                settingsLabel.setEnabled(false);
                break;
        
            case "credits":
                // Change the state
                navigationState = "exit";
                // Disable Start Label and Enable Exit Label
                exitLabel.setEnabled(true);
                creditsLabel.setEnabled(false);
                break;
        
            case "exit":
                // Change the state
                navigationState = "start";
                // Disable Start Label and Enable Exit Label
                startLabel.setEnabled(true);
                exitLabel.setEnabled(false);     
                break;
        } 
    }
    
    public void enterKeyPressed(){
        switch (navigationState) {
            case "start":
                panelState = "startGame";
                startGamePanel.setVisible(true);
                break;
            case "settings":
                panelState = "settings";
                settingsPanel.setVisible(true);
                // Give focus to SettingsPanel so its action listener works
                settingsPanel.requestFocus();
                break;
            case "credits":
                panelState = "credits";
                creditsPanel.setVisible(true);
                break;
            case "exit":
                panelState = "exit";
                exitPromptPanel.setVisible(true);
                break;
        }
    }
    
    public void escapeKeyPressed(){
        switch (panelState) {
            case "tutorial":
                panelState = "home";
                tutorialPanel.setVisible(false);
            case "startGame":
                panelState = "home";
                startGamePanel.setVisible(false);
            case "loadGame":
                panelState = "home";
                loadGamePanel.setVisible(false);
            case "newPlayer":
                panelState = "home";
                newPlayerPanel.getPlayerNameField().setText("Player");
                newPlayerPanel.setVisible(false);
            case "settings":
                panelState = "home";
                settingsPanel.setVisible(false);
            case "credits":
                panelState = "home";
                creditsPanel.setVisible(false);
                break;
            case "exit":
                panelState = "home";
                exitPromptPanel.setVisible(false);
                break;
        }
    }
    
    // ---------- Key Listener Class START ---------- //
    class myKeyListener implements KeyListener {

        @Override
        public void keyTyped(KeyEvent e) {
            
        }

        @Override
        public void keyPressed(KeyEvent e) {
            // ---- MENU NAVIGATION ----
            // If UP KEY is pressed
            if(e.getKeyCode() == java.awt.event.KeyEvent.VK_UP){
                navigateUpKey();
                System.out.println("UP");
            }
            
            // If DOWN KEY is pressed
            if(e.getKeyCode() == java.awt.event.KeyEvent.VK_DOWN){
                navigateDownKey();
            }
            
            // ---- USER CONFIRMATION ACTION ----
            if(e.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
                enterKeyPressed();
            }
            
            // ---- USER ESCAPE ACTION ----
            if(e.getKeyCode() == java.awt.event.KeyEvent.VK_ESCAPE){
                escapeKeyPressed();
            }
        }

        @Override
        public void keyReleased(KeyEvent e){}
        
    }
    // ---------- Key Listener Class END ---------- //
    
    // ---------- Mouse Listener Class START ---------- //
    class myMouseListener implements MouseListener {
        public void mouseClicked(MouseEvent e) {
            if(e.getSource() == startLabel && panelState.equalsIgnoreCase("home")){
               panelState = "startGame";
               startGamePanel.setVisible(true);
            }
               
            if(e.getSource() == settingsLabel && panelState.equalsIgnoreCase("home")){
                 panelState = "settings";
                settingsPanel.setVisible(true);
            }   
            if(e.getSource() == creditsLabel && panelState.equalsIgnoreCase("home")){
                 panelState = "credits";
                creditsPanel.setVisible(true);
            }   
            if(e.getSource() == exitLabel && panelState.equalsIgnoreCase("home")){
                panelState = "exit";
                exitPromptPanel.setVisible(true);
            }
        }
        
        public void mouseEntered(MouseEvent e) {
            if(e.getSource() == startLabel){
                disableAllLabels();
                System.out.println("MOUSE ENTERED START");
                startLabel.setEnabled(true);
                navigationState = "start";
            }
                
            if(e.getSource() == settingsLabel){
                disableAllLabels();
                settingsLabel.setEnabled(true);
                navigationState = "settings";
            }
                
            if(e.getSource() == creditsLabel){
                disableAllLabels();
                creditsLabel.setEnabled(true);
                navigationState = "credits";
            }
                
            if(e.getSource() == exitLabel){
                disableAllLabels();
                exitLabel.setEnabled(true);
                navigationState = "exit";
            }     
        }
        
        public void mouseExited(MouseEvent e) {
            if(e.getSource() == startLabel){
                startLabel.setEnabled(false);
                navigationState = "none";
            }
                
            if(e.getSource() == settingsLabel){
                settingsLabel.setEnabled(false);
                navigationState = "none";
            }
                
            if(e.getSource() == creditsLabel){
                creditsLabel.setEnabled(false);
                navigationState = "none";
            }
                
            if(e.getSource() == exitLabel){
                exitLabel.setEnabled(false);
                navigationState = "none";
            }
                
        }

        @Override
        public void mousePressed(MouseEvent e) {
            
                
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            
        }
    }
    // ---------- Mouse Listener Class END ---------- //
    
    // ---------- Button Listener Class START ---------- //
    class ButtonListener implements ActionListener{

        @Override
        public void actionPerformed(ActionEvent e) {
            // Start Game Panels Buttons
            JButton loadButton = startGamePanel.getLoadButton();
            JButton newButton = startGamePanel.getNewButton();
            
            // New Player Panel's Buttons
            JButton createPlayerButton = newPlayerPanel.getCreatePlayerButton();
            
            if(e.getSource() == loadButton){
                panelState = "loadGame";
                startGamePanel.setVisible(false);
                loadGamePanel.setVisible(true);
                requestFocus();
            }
            else if (e.getSource() == newButton){
                panelState = "newPlayer";
                startGamePanel.setVisible(false);
                newPlayerPanel.setVisible(true);
                requestFocus();
            }
            else if (e.getSource() == createPlayerButton){
                player = new Player(newPlayerPanel.getTextfieldText(), 0, 3);
                System.out.println(player.toString());
                requestFocus();
            }
        }
        
    }
    // ---------- Button Listener Class END ---------- //
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bgImage;
    private javax.swing.JLabel creditsLabel;
    private EscapeRoom.GUI.CreditsPanel creditsPanel;
    private javax.swing.JLabel exitLabel;
    private EscapeRoom.GUI.ExitPanel exitPromptPanel;
    private EscapeRoom.GUI.loadGamePanel loadGamePanel;
    private javax.swing.JPanel mainPanel;
    private EscapeRoom.GUI.newPlayerPanel newPlayerPanel;
    private javax.swing.JLabel settingsLabel;
    private EscapeRoom.GUI.SettingsPanel settingsPanel;
    private EscapeRoom.GUI.StartGamePanel startGamePanel;
    private javax.swing.JLabel startLabel;
    private javax.swing.JLabel tutorialLabel;
    private EscapeRoom.GUI.TutorialPanel tutorialPanel;
    // End of variables declaration//GEN-END:variables
}
